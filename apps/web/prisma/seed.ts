import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Seed Vietnam provinces, districts, and wards
  await seedVietnamAddresses()
  
  // Seed products
  await seedProducts()
  
  // Seed suppliers
  await seedSuppliers()
  
  // Seed users
  await seedUsers()
  
  // Seed orders
  await seedOrders()

  console.log('‚úÖ Database seeding completed!')
}

async function seedVietnamAddresses() {
  console.log('üìç Seeding Vietnam addresses...')

  // Full list of 63 Vietnamese provinces/cities with official 2-digit codes
  const provinces = [
    { code: '01', name: 'Th√†nh ph·ªë H√† N·ªôi', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { code: '02', name: 'T·ªânh H√† Giang', type: 'T·ªânh' },
    { code: '04', name: 'T·ªânh Cao B·∫±ng', type: 'T·ªânh' },
    { code: '06', name: 'T·ªânh B·∫Øc K·∫°n', type: 'T·ªânh' },
    { code: '08', name: 'T·ªânh Tuy√™n Quang', type: 'T·ªânh' },
    { code: '10', name: 'T·ªânh L√†o Cai', type: 'T·ªânh' },
    { code: '11', name: 'T·ªânh ƒêi·ªán Bi√™n', type: 'T·ªânh' },
    { code: '12', name: 'T·ªânh Lai Ch√¢u', type: 'T·ªânh' },
    { code: '14', name: 'T·ªânh S∆°n La', type: 'T·ªânh' },
    { code: '15', name: 'T·ªânh Y√™n B√°i', type: 'T·ªânh' },
    { code: '17', name: 'T·ªânh H√≤a B√¨nh', type: 'T·ªânh' },
    { code: '19', name: 'T·ªânh Th√°i Nguy√™n', type: 'T·ªânh' },
    { code: '20', name: 'T·ªânh L·∫°ng S∆°n', type: 'T·ªânh' },
    { code: '22', name: 'T·ªânh Qu·∫£ng Ninh', type: 'T·ªânh' },
    { code: '24', name: 'T·ªânh B·∫Øc Giang', type: 'T·ªânh' },
    { code: '25', name: 'T·ªânh Ph√∫ Th·ªç', type: 'T·ªânh' },
    { code: '26', name: 'T·ªânh Vƒ©nh Ph√∫c', type: 'T·ªânh' },
    { code: '27', name: 'T·ªânh B·∫Øc Ninh', type: 'T·ªânh' },
    { code: '30', name: 'T·ªânh H·∫£i D∆∞∆°ng', type: 'T·ªânh' },
    { code: '31', name: 'Th√†nh ph·ªë H·∫£i Ph√≤ng', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { code: '33', name: 'T·ªânh H∆∞ng Y√™n', type: 'T·ªânh' },
    { code: '34', name: 'T·ªânh Th√°i B√¨nh', type: 'T·ªânh' },
    { code: '35', name: 'T·ªânh H√† Nam', type: 'T·ªânh' },
    { code: '36', name: 'T·ªânh Nam ƒê·ªãnh', type: 'T·ªânh' },
    { code: '37', name: 'T·ªânh Ninh B√¨nh', type: 'T·ªânh' },
    { code: '38', name: 'T·ªânh Thanh H√≥a', type: 'T·ªânh' },
    { code: '40', name: 'T·ªânh Ngh·ªá An', type: 'T·ªânh' },
    { code: '42', name: 'T·ªânh H√† Tƒ©nh', type: 'T·ªânh' },
    { code: '44', name: 'T·ªânh Qu·∫£ng B√¨nh', type: 'T·ªânh' },
    { code: '45', name: 'T·ªânh Qu·∫£ng Tr·ªã', type: 'T·ªânh' },
    { code: '46', name: 'T·ªânh Th·ª´a Thi√™n Hu·∫ø', type: 'T·ªânh' },
    { code: '48', name: 'Th√†nh ph·ªë ƒê√† N·∫µng', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { code: '49', name: 'T·ªânh Qu·∫£ng Nam', type: 'T·ªânh' },
    { code: '51', name: 'T·ªânh Qu·∫£ng Ng√£i', type: 'T·ªânh' },
    { code: '52', name: 'T·ªânh B√¨nh ƒê·ªãnh', type: 'T·ªânh' },
    { code: '54', name: 'T·ªânh Ph√∫ Y√™n', type: 'T·ªânh' },
    { code: '56', name: 'T·ªânh Kh√°nh H√≤a', type: 'T·ªânh' },
    { code: '58', name: 'T·ªânh Ninh Thu·∫≠n', type: 'T·ªânh' },
    { code: '60', name: 'T·ªânh B√¨nh Thu·∫≠n', type: 'T·ªânh' },
    { code: '62', name: 'T·ªânh Kon Tum', type: 'T·ªânh' },
    { code: '64', name: 'T·ªânh Gia Lai', type: 'T·ªânh' },
    { code: '66', name: 'T·ªânh ƒê·∫Øk L·∫Øk', type: 'T·ªânh' },
    { code: '67', name: 'T·ªânh ƒê·∫Øk N√¥ng', type: 'T·ªânh' },
    { code: '68', name: 'T·ªânh L√¢m ƒê·ªìng', type: 'T·ªânh' },
    { code: '70', name: 'T·ªânh B√¨nh Ph∆∞·ªõc', type: 'T·ªânh' },
    { code: '72', name: 'T·ªânh T√¢y Ninh', type: 'T·ªânh' },
    { code: '74', name: 'T·ªânh B√¨nh D∆∞∆°ng', type: 'T·ªânh' },
    { code: '75', name: 'T·ªânh ƒê·ªìng Nai', type: 'T·ªânh' },
    { code: '77', name: 'T·ªânh B√† R·ªãa - V≈©ng T√†u', type: 'T·ªânh' },
    { code: '79', name: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { code: '80', name: 'T·ªânh Long An', type: 'T·ªânh' },
    { code: '82', name: 'T·ªânh Ti·ªÅn Giang', type: 'T·ªânh' },
    { code: '83', name: 'T·ªânh B·∫øn Tre', type: 'T·ªânh' },
    { code: '84', name: 'T·ªânh Tr√† Vinh', type: 'T·ªânh' },
    { code: '86', name: 'T·ªânh Vƒ©nh Long', type: 'T·ªânh' },
    { code: '87', name: 'T·ªânh ƒê·ªìng Th√°p', type: 'T·ªânh' },
    { code: '89', name: 'T·ªânh An Giang', type: 'T·ªânh' },
    { code: '91', name: 'T·ªânh Ki√™n Giang', type: 'T·ªânh' },
    { code: '92', name: 'Th√†nh ph·ªë C·∫ßn Th∆°', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { code: '93', name: 'T·ªânh H·∫≠u Giang', type: 'T·ªânh' },
    { code: '94', name: 'T·ªânh S√≥c TrƒÉng', type: 'T·ªânh' },
    { code: '95', name: 'T·ªânh B·∫°c Li√™u', type: 'T·ªânh' },
    { code: '96', name: 'T·ªânh C√† Mau', type: 'T·ªânh' }
  ]

  for (const provinceData of provinces) {
    const province = await prisma.province.upsert({
      where: { code: provinceData.code },
      update: {},
      create: provinceData
    })

    // Create some districts for each province
    const districts = [
      { code: `${provinceData.code}01`, name: `Qu·∫≠n 1`, type: 'Qu·∫≠n' },
      { code: `${provinceData.code}02`, name: `Qu·∫≠n 2`, type: 'Qu·∫≠n' },
      { code: `${provinceData.code}03`, name: `Qu·∫≠n 3`, type: 'Qu·∫≠n' },
      { code: `${provinceData.code}04`, name: `Huy·ªán 1`, type: 'Huy·ªán' },
      { code: `${provinceData.code}05`, name: `Huy·ªán 2`, type: 'Huy·ªán' }
    ]

    for (const districtData of districts) {
      const district = await prisma.district.upsert({
        where: { code: districtData.code },
        update: {},
        create: {
          ...districtData,
          provinceId: province.id
        }
      })

      // Create some wards for each district
      const wards = [
        { code: `${districtData.code}01`, name: `Ph∆∞·ªùng 1`, type: 'Ph∆∞·ªùng' },
        { code: `${districtData.code}02`, name: `Ph∆∞·ªùng 2`, type: 'Ph∆∞·ªùng' },
        { code: `${districtData.code}03`, name: `X√£ 1`, type: 'X√£' },
        { code: `${districtData.code}04`, name: `X√£ 2`, type: 'X√£' }
      ]

      for (const wardData of wards) {
        await prisma.ward.upsert({
          where: { code: wardData.code },
          update: {},
          create: {
            ...wardData,
            districtId: district.id
          }
        })
      }
    }
  }

  console.log('‚úÖ Vietnam addresses seeded')
}

async function seedProducts() {
  console.log('üé® Seeding products...')

  const products = [
    {
      name: 'KOVA Premium Interior',
      brand: 'KOVA',
      category: 'S∆°n N·ªôi Th·∫•t',
      description: 'S∆°n n·ªôi th·∫•t cao c·∫•p, ch·ªëng ·∫©m m·ªëc, d·ªÖ lau ch√πi',
      basePrice: 750000,
      originalPrice: 850000,
      coverageRate: 12.0,
      unit: 'th√πng 18L'
    },
    {
      name: 'KOVA Weathershield',
      brand: 'KOVA',
      category: 'S∆°n Ngo·∫°i Th·∫•t',
      description: 'S∆°n ngo·∫°i th·∫•t ch·ªëng th·∫•m, ch·ªëng n·∫Øng, b·ªÅn m√†u',
      basePrice: 850000,
      originalPrice: 950000,
      coverageRate: 10.0,
      unit: 'th√πng 18L'
    },
    {
      name: 'Jotun Lady Interior',
      brand: 'Jotun',
      category: 'S∆°n N·ªôi Th·∫•t',
      description: 'S∆°n n·ªôi th·∫•t th√¢n thi·ªán m√¥i tr∆∞·ªùng, kh√¥ng m√πi',
      basePrice: 1100000,
      originalPrice: 1200000,
      coverageRate: 11.0,
      unit: 'th√πng 18L'
    },
    {
      name: 'Jotun Weatherguard',
      brand: 'Jotun',
      category: 'S∆°n Ngo·∫°i Th·∫•t',
      description: 'S∆°n ngo·∫°i th·∫•t ch·ªëng th·∫•m cao c·∫•p, b·ªÅn m√†u l√¢u d√†i',
      basePrice: 1250000,
      originalPrice: 1350000,
      coverageRate: 9.0,
      unit: 'th√πng 18L'
    },
    {
      name: 'Dulux Easycare Interior',
      brand: 'Dulux',
      category: 'S∆°n N·ªôi Th·∫•t',
      description: 'S∆°n n·ªôi th·∫•t d·ªÖ lau ch√πi, ch·ªëng b√°m b·∫©n',
      basePrice: 880000,
      originalPrice: 980000,
      coverageRate: 12.5,
      unit: 'th√πng 18L'
    },
    {
      name: 'Dulux Weathershield Max',
      brand: 'Dulux',
      category: 'S∆°n Ngo·∫°i Th·∫•t',
      description: 'S∆°n ngo·∫°i th·∫•t ch·ªëng th·∫•m t·ªëi ƒëa, b·ªÅn m√†u',
      basePrice: 1050000,
      originalPrice: 1150000,
      coverageRate: 10.5,
      unit: 'th√πng 18L'
    },
    {
      name: 'Nippon Odour-less',
      brand: 'Nippon',
      category: 'S∆°n N·ªôi Th·∫•t',
      description: 'S∆°n n·ªôi th·∫•t kh√¥ng m√πi, th√¢n thi·ªán m√¥i tr∆∞·ªùng',
      basePrice: 1000000,
      originalPrice: 1100000,
      coverageRate: 11.5,
      unit: 'th√πng 18L'
    },
    {
      name: 'Nippon Weatherbond',
      brand: 'Nippon',
      category: 'S∆°n Ngo·∫°i Th·∫•t',
      description: 'S∆°n ngo·∫°i th·∫•t ch·ªëng th·∫•m, ch·ªëng n·∫Øng',
      basePrice: 1150000,
      originalPrice: 1250000,
      coverageRate: 10.0,
      unit: 'th√πng 18L'
    },
    {
      name: 'Maxilite Economy Interior',
      brand: 'Maxilite',
      category: 'S∆°n N·ªôi Th·∫•t',
      description: 'S∆°n n·ªôi th·∫•t gi√° r·∫ª, ch·∫•t l∆∞·ª£ng t·ªët',
      basePrice: 400000,
      originalPrice: 450000,
      coverageRate: 10.0,
      unit: 'th√πng 18L'
    },
    {
      name: 'Maxilite Weatherproof',
      brand: 'Maxilite',
      category: 'S∆°n Ngo·∫°i Th·∫•t',
      description: 'S∆°n ngo·∫°i th·∫•t ch·ªëng th·∫•m c∆° b·∫£n',
      basePrice: 500000,
      originalPrice: 550000,
      coverageRate: 9.0,
      unit: 'th√πng 18L'
    }
  ]

  for (const productData of products) {
    await prisma.product.upsert({
      where: { name: productData.name },
      update: {},
      create: productData
    })
  }

  console.log('‚úÖ Products seeded')
}

async function seedSuppliers() {
  console.log('üè¢ Seeding suppliers...')

  const suppliers = [
    {
      name: 'C√¥ng ty TNHH S∆°n KOVA',
      businessInfo: JSON.stringify({
        license: '0101234567',
        taxCode: '0101234567',
        website: 'https://kova.com.vn',
        description: 'Nh√† s·∫£n xu·∫•t s∆°n h√†ng ƒë·∫ßu Vi·ªát Nam v·ªõi h∆°n 30 nƒÉm kinh nghi·ªám, chuy√™n s·∫£n xu·∫•t s∆°n n∆∞·ªõc, s∆°n d·∫ßu v√† c√°c s·∫£n ph·∫©m b·∫£o v·ªá b·ªÅ m·∫∑t'
      }),
      contactInfo: JSON.stringify({
        email: 'contact@kova.com.vn',
        phone: '02812345678',
        address: '123 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 1, TP.HCM'
      }),
      isVerified: true
    },
    {
      name: 'C√¥ng ty TNHH S∆°n Jotun Vi·ªát Nam',
      businessInfo: JSON.stringify({
        license: '0102345678',
        taxCode: '0102345678',
        website: 'https://jotun.com.vn',
        description: 'Th∆∞∆°ng hi·ªáu s∆°n qu·ªëc t·∫ø uy t√≠n t·ª´ Na Uy, chuy√™n s∆°n c√¥ng nghi·ªáp, s∆°n d√¢n d·ª•ng v√† s∆°n b·∫£o v·ªá k·∫øt c·∫•u th√©p'
      }),
      contactInfo: JSON.stringify({
        email: 'info@jotun.com.vn',
        phone: '02823456789',
        address: '456 ƒê∆∞·ªùng L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM'
      }),
      isVerified: true
    },
    {
      name: 'C√¥ng ty TNHH S∆°n Dulux Vi·ªát Nam',
      businessInfo: JSON.stringify({
        license: '0103456789',
        taxCode: '0103456789',
        website: 'https://dulux.com.vn',
        description: 'Th∆∞∆°ng hi·ªáu s∆°n to√†n c·∫ßu c·ªßa AkzoNobel, ƒëa d·∫°ng s·∫£n ph·∫©m s∆°n n·ªôi th·∫•t, ngo·∫°i th·∫•t v√† s∆°n chuy√™n d·ª•ng'
      }),
      contactInfo: JSON.stringify({
        email: 'contact@dulux.com.vn',
        phone: '02834567890',
        address: '789 ƒê∆∞·ªùng V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM'
      }),
      isVerified: true
    },
    {
      name: 'C√¥ng ty TNHH S∆°n Nippon Vi·ªát Nam',
      businessInfo: JSON.stringify({
        license: '0104567890',
        taxCode: '0104567890',
        website: 'https://nipponpaint.com.vn',
        description: 'Th∆∞∆°ng hi·ªáu s∆°n Nh·∫≠t B·∫£n ch·∫•t l∆∞·ª£ng cao, c√¥ng ngh·ªá ti√™n ti·∫øn, chuy√™n s∆°n n∆∞·ªõc v√† s∆°n ch·ªëng th·∫•m'
      }),
      contactInfo: JSON.stringify({
        email: 'info@nipponpaint.com.vn',
        phone: '02845678901',
        address: '321 ƒê∆∞·ªùng Nguy·ªÖn Th·ªã Minh Khai, Qu·∫≠n 1, TP.HCM'
      }),
      isVerified: true
    },
    {
      name: 'C√¥ng ty TNHH S∆°n Maxilite',
      businessInfo: JSON.stringify({
        license: '0105678901',
        taxCode: '0105678901',
        website: 'https://maxilite.com.vn',
        description: 'Nh√† s·∫£n xu·∫•t s∆°n gi√° r·∫ª, ch·∫•t l∆∞·ª£ng t·ªët cho th·ªã tr∆∞·ªùng ƒë·∫°i ch√∫ng, chuy√™n s∆°n n∆∞·ªõc v√† s∆°n d·∫ßu'
      }),
      contactInfo: JSON.stringify({
        email: 'contact@maxilite.com.vn',
        phone: '02856789012',
        address: '654 ƒê∆∞·ªùng C·ªông H√≤a, Qu·∫≠n T√¢n B√¨nh, TP.HCM'
      }),
      isVerified: false
    }
  ]

  for (const supplierData of suppliers) {
    await prisma.supplier.upsert({
      where: { name: supplierData.name },
      update: {},
      create: supplierData
    })
  }

  console.log('‚úÖ Suppliers seeded')
}

async function seedUsers() {
  console.log('üë• Seeding users...')

  const users = [
    {
      email: 'admin@vncompare.com',
      name: 'Admin VNCompare',
      role: 'admin'
    },
    {
      email: 'customer1@example.com',
      name: 'Nguy·ªÖn VƒÉn A',
      role: 'customer'
    },
    {
      email: 'customer2@example.com',
      name: 'Tr·∫ßn Th·ªã B',
      role: 'customer'
    },
    {
      email: 'customer3@example.com',
      name: 'L√™ VƒÉn C',
      role: 'customer'
    },
    {
      email: 'customer4@example.com',
      name: 'Ph·∫°m Th·ªã D',
      role: 'customer'
    }
  ]

  for (const userData of users) {
    await prisma.user.upsert({
      where: { email: userData.email },
      update: {},
      create: userData
    })
  }

  console.log('‚úÖ Users seeded')
}

async function seedOrders() {
  console.log('üì¶ Seeding orders...')

  // Get some products and suppliers
  const products = await prisma.product.findMany({ take: 5 })
  const suppliers = await prisma.supplier.findMany({ take: 3 })
  const users = await prisma.user.findMany({ where: { role: 'customer' } })

  if (products.length === 0 || suppliers.length === 0 || users.length === 0) {
    console.log('‚ö†Ô∏è Skipping orders seeding - missing required data')
    return
  }

  const orders = [
    {
      userId: users[0].id,
      totalAmount: products[0].basePrice! * 2,
      shippingAddress: JSON.stringify({
        name: 'Nguy·ªÖn VƒÉn A',
        phone: '0901234567',
        address: '123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng 1, Qu·∫≠n 1, TP.HCM'
      }),
      status: 'completed',
      paymentStatus: 'paid'
    },
    {
      userId: users[1].id,
      totalAmount: products[1].basePrice! * 1,
      shippingAddress: JSON.stringify({
        name: 'Tr·∫ßn Th·ªã B',
        phone: '0901234568',
        address: '456 ƒê∆∞·ªùng DEF, Ph∆∞·ªùng 2, Qu·∫≠n 2, TP.HCM'
      }),
      status: 'pending',
      paymentStatus: 'pending'
    },
    {
      userId: users[2].id,
      totalAmount: products[2].basePrice! * 3,
      shippingAddress: JSON.stringify({
        name: 'L√™ VƒÉn C',
        phone: '0901234569',
        address: '789 ƒê∆∞·ªùng GHI, Ph∆∞·ªùng 3, Qu·∫≠n 3, TP.HCM'
      }),
      status: 'shipped',
      paymentStatus: 'paid'
    }
  ]

  for (const orderData of orders) {
    await prisma.order.create({
      data: orderData
    })
  }

  console.log('‚úÖ Orders seeded')
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
